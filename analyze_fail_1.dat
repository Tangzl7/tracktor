# [No.1] construct_wrapper.42
# In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(227)/    def construct(self, x: Tensor) -> Tensor:/
funcgraph fg_42(
        %para1 : Tensor(U8)[8, 3, 256, 128]    # x
        , %para2 : Ref[Tensor(F32)][1]    # classifier.bias
        , %para3 : Ref[Tensor(F32)][1, 512]    # classifier.weight
        , %para4 : Ref[Tensor(F32)][512]    # fc.1.gamma
        , %para5 : Ref[Tensor(F32)][512]    # fc.1.beta
        , %para6 : Ref[Tensor(F32)][512]    # fc.1.moving_mean
        , %para7 : Ref[Tensor(F32)][512]    # fc.1.moving_variance
        , %para8 : Ref[Tensor(F32)][64, 3, 7, 7]    # conv1.weight
        , %para9 : Ref[Tensor(F32)][512]    # fc.0.bias
        , %para10 : Ref[Tensor(F32)][512, 2048]    # fc.0.weight
        , %para11 : Ref[Tensor(F32)][64]    # bn1.gamma
        , %para12 : Ref[Tensor(F32)][64]    # bn1.beta
        , %para13 : Ref[Tensor(F32)][64]    # bn1.moving_mean
        , %para14 : Ref[Tensor(F32)][64]    # bn1.moving_variance
        , %para15 : Ref[Tensor(F32)][2048, 512, 1, 1]    # layer4.0.conv3.weight
        , %para16 : Ref[Tensor(F32)][2048, 512, 1, 1]    # layer4.1.conv3.weight
        , %para17 : Ref[Tensor(F32)][2048, 512, 1, 1]    # layer4.2.conv3.weight
        , %para18 : Ref[Tensor(F32)][2048, 1024, 1, 1]    # layer4.0.downsample.0.weight
        , %para19 : Ref[Tensor(F32)][1024, 256, 1, 1]    # layer3.0.conv3.weight
        , %para20 : Ref[Tensor(F32)][1024, 256, 1, 1]    # layer3.1.conv3.weight
        , %para21 : Ref[Tensor(F32)][1024, 256, 1, 1]    # layer3.2.conv3.weight
        , %para22 : Ref[Tensor(F32)][1024, 256, 1, 1]    # layer3.3.conv3.weight
        , %para23 : Ref[Tensor(F32)][1024, 256, 1, 1]    # layer3.4.conv3.weight
        , %para24 : Ref[Tensor(F32)][1024, 256, 1, 1]    # layer3.5.conv3.weight
        , %para25 : Ref[Tensor(F32)][1024, 512, 1, 1]    # layer3.0.downsample.0.weight
        , %para26 : Ref[Tensor(F32)][512, 128, 1, 1]    # layer2.0.conv3.weight
        , %para27 : Ref[Tensor(F32)][512, 128, 1, 1]    # layer2.1.conv3.weight
        , %para28 : Ref[Tensor(F32)][512, 128, 1, 1]    # layer2.2.conv3.weight
        , %para29 : Ref[Tensor(F32)][512, 128, 1, 1]    # layer2.3.conv3.weight
        , %para30 : Ref[Tensor(F32)][2048]    # layer4.0.bn3.gamma
        , %para31 : Ref[Tensor(F32)][2048]    # layer4.0.bn3.beta
        , %para32 : Ref[Tensor(F32)][2048]    # layer4.0.bn3.moving_mean
        , %para33 : Ref[Tensor(F32)][2048]    # layer4.0.bn3.moving_variance
        , %para34 : Ref[Tensor(F32)][512, 512, 3, 3]    # layer4.0.conv2.weight
        , %para35 : Ref[Tensor(F32)][2048]    # layer4.1.bn3.gamma
        , %para36 : Ref[Tensor(F32)][2048]    # layer4.1.bn3.beta
        , %para37 : Ref[Tensor(F32)][2048]    # layer4.1.bn3.moving_mean
        , %para38 : Ref[Tensor(F32)][2048]    # layer4.1.bn3.moving_variance
        , %para39 : Ref[Tensor(F32)][512, 512, 3, 3]    # layer4.1.conv2.weight
        , %para40 : Ref[Tensor(F32)][2048]    # layer4.2.bn3.gamma
        , %para41 : Ref[Tensor(F32)][2048]    # layer4.2.bn3.beta
        , %para42 : Ref[Tensor(F32)][2048]    # layer4.2.bn3.moving_mean
        , %para43 : Ref[Tensor(F32)][2048]    # layer4.2.bn3.moving_variance
        , %para44 : Ref[Tensor(F32)][512, 512, 3, 3]    # layer4.2.conv2.weight
        , %para45 : Ref[Tensor(F32)][512, 256, 1, 1]    # layer2.0.downsample.0.weight
        , %para46 : Ref[Tensor(F32)][256, 64, 1, 1]    # layer1.0.conv3.weight
        , %para47 : Ref[Tensor(F32)][256, 64, 1, 1]    # layer1.1.conv3.weight
        , %para48 : Ref[Tensor(F32)][256, 64, 1, 1]    # layer1.2.conv3.weight
        , %para49 : Ref[Tensor(F32)][1024]    # layer3.0.bn3.gamma
        , %para50 : Ref[Tensor(F32)][1024]    # layer3.0.bn3.beta
        , %para51 : Ref[Tensor(F32)][1024]    # layer3.0.bn3.moving_mean
        , %para52 : Ref[Tensor(F32)][1024]    # layer3.0.bn3.moving_variance
        , %para53 : Ref[Tensor(F32)][256, 256, 3, 3]    # layer3.0.conv2.weight
        , %para54 : Ref[Tensor(F32)][1024]    # layer3.1.bn3.gamma
        , %para55 : Ref[Tensor(F32)][1024]    # layer3.1.bn3.beta
        , %para56 : Ref[Tensor(F32)][1024]    # layer3.1.bn3.moving_mean
        , %para57 : Ref[Tensor(F32)][1024]    # layer3.1.bn3.moving_variance
        , %para58 : Ref[Tensor(F32)][256, 256, 3, 3]    # layer3.1.conv2.weight
        , %para59 : Ref[Tensor(F32)][1024]    # layer3.2.bn3.gamma
        , %para60 : Ref[Tensor(F32)][1024]    # layer3.2.bn3.beta
        , %para61 : Ref[Tensor(F32)][1024]    # layer3.2.bn3.moving_mean
        , %para62 : Ref[Tensor(F32)][1024]    # layer3.2.bn3.moving_variance
        , %para63 : Ref[Tensor(F32)][256, 256, 3, 3]    # layer3.2.conv2.weight
        , %para64 : Ref[Tensor(F32)][1024]    # layer3.3.bn3.gamma
        , %para65 : Ref[Tensor(F32)][1024]    # layer3.3.bn3.beta
        , %para66 : Ref[Tensor(F32)][1024]    # layer3.3.bn3.moving_mean
        , %para67 : Ref[Tensor(F32)][1024]    # layer3.3.bn3.moving_variance
        , %para68 : Ref[Tensor(F32)][256, 256, 3, 3]    # layer3.3.conv2.weight
        , %para69 : Ref[Tensor(F32)][1024]    # layer3.4.bn3.gamma
        , %para70 : Ref[Tensor(F32)][1024]    # layer3.4.bn3.beta
        , %para71 : Ref[Tensor(F32)][1024]    # layer3.4.bn3.moving_mean
        , %para72 : Ref[Tensor(F32)][1024]    # layer3.4.bn3.moving_variance
        , %para73 : Ref[Tensor(F32)][256, 256, 3, 3]    # layer3.4.conv2.weight
        , %para74 : Ref[Tensor(F32)][1024]    # layer3.5.bn3.gamma
        , %para75 : Ref[Tensor(F32)][1024]    # layer3.5.bn3.beta
        , %para76 : Ref[Tensor(F32)][1024]    # layer3.5.bn3.moving_mean
        , %para77 : Ref[Tensor(F32)][1024]    # layer3.5.bn3.moving_variance
        , %para78 : Ref[Tensor(F32)][256, 256, 3, 3]    # layer3.5.conv2.weight
        , %para79 : Ref[Tensor(F32)][256, 64, 1, 1]    # layer1.0.downsample.0.weight
        , %para80 : Ref[Tensor(F32)][2048]    # layer4.0.downsample.1.gamma
        , %para81 : Ref[Tensor(F32)][2048]    # layer4.0.downsample.1.beta
        , %para82 : Ref[Tensor(F32)][2048]    # layer4.0.downsample.1.moving_mean
        , %para83 : Ref[Tensor(F32)][2048]    # layer4.0.downsample.1.moving_variance
        , %para84 : Ref[Tensor(F32)][512]    # layer2.0.bn3.gamma
        , %para85 : Ref[Tensor(F32)][512]    # layer2.0.bn3.beta
        , %para86 : Ref[Tensor(F32)][512]    # layer2.0.bn3.moving_mean
        , %para87 : Ref[Tensor(F32)][512]    # layer2.0.bn3.moving_variance
        , %para88 : Ref[Tensor(F32)][128, 128, 3, 3]    # layer2.0.conv2.weight
        , %para89 : Ref[Tensor(F32)][512]    # layer2.1.bn3.gamma
        , %para90 : Ref[Tensor(F32)][512]    # layer2.1.bn3.beta
        , %para91 : Ref[Tensor(F32)][512]    # layer2.1.bn3.moving_mean
        , %para92 : Ref[Tensor(F32)][512]    # layer2.1.bn3.moving_variance
        , %para93 : Ref[Tensor(F32)][128, 128, 3, 3]    # layer2.1.conv2.weight
        , %para94 : Ref[Tensor(F32)][512]    # layer2.2.bn3.gamma
        , %para95 : Ref[Tensor(F32)][512]    # layer2.2.bn3.beta
        , %para96 : Ref[Tensor(F32)][512]    # layer2.2.bn3.moving_mean
        , %para97 : Ref[Tensor(F32)][512]    # layer2.2.bn3.moving_variance
        , %para98 : Ref[Tensor(F32)][128, 128, 3, 3]    # layer2.2.conv2.weight
        , %para99 : Ref[Tensor(F32)][512]    # layer2.3.bn3.gamma
        , %para100 : Ref[Tensor(F32)][512]    # layer2.3.bn3.beta
        , %para101 : Ref[Tensor(F32)][512]    # layer2.3.bn3.moving_mean
        , %para102 : Ref[Tensor(F32)][512]    # layer2.3.bn3.moving_variance
        , %para103 : Ref[Tensor(F32)][128, 128, 3, 3]    # layer2.3.conv2.weight
        , %para104 : Ref[Tensor(F32)][512]    # layer4.0.bn2.gamma
        , %para105 : Ref[Tensor(F32)][512]    # layer4.0.bn2.beta
        , %para106 : Ref[Tensor(F32)][512]    # layer4.0.bn2.moving_mean
        , %para107 : Ref[Tensor(F32)][512]    # layer4.0.bn2.moving_variance
        , %para108 : Ref[Tensor(F32)][512, 1024, 1, 1]    # layer4.0.conv1.weight
        , %para109 : Ref[Tensor(F32)][512]    # layer4.1.bn2.gamma
        , %para110 : Ref[Tensor(F32)][512]    # layer4.1.bn2.beta
        , %para111 : Ref[Tensor(F32)][512]    # layer4.1.bn2.moving_mean
        , %para112 : Ref[Tensor(F32)][512]    # layer4.1.bn2.moving_variance
        , %para113 : Ref[Tensor(F32)][512, 2048, 1, 1]    # layer4.1.conv1.weight
        , %para114 : Ref[Tensor(F32)][512]    # layer4.2.bn2.gamma
        , %para115 : Ref[Tensor(F32)][512]    # layer4.2.bn2.beta
        , %para116 : Ref[Tensor(F32)][512]    # layer4.2.bn2.moving_mean
        , %para117 : Ref[Tensor(F32)][512]    # layer4.2.bn2.moving_variance
        , %para118 : Ref[Tensor(F32)][512, 2048, 1, 1]    # layer4.2.conv1.weight
        , %para119 : Ref[Tensor(F32)][1024]    # layer3.0.downsample.1.gamma
        , %para120 : Ref[Tensor(F32)][1024]    # layer3.0.downsample.1.beta
        , %para121 : Ref[Tensor(F32)][1024]    # layer3.0.downsample.1.moving_mean
        , %para122 : Ref[Tensor(F32)][1024]    # layer3.0.downsample.1.moving_variance
        , %para123 : Ref[Tensor(F32)][256]    # layer1.0.bn3.gamma
        , %para124 : Ref[Tensor(F32)][256]    # layer1.0.bn3.beta
        , %para125 : Ref[Tensor(F32)][256]    # layer1.0.bn3.moving_mean
        , %para126 : Ref[Tensor(F32)][256]    # layer1.0.bn3.moving_variance
        , %para127 : Ref[Tensor(F32)][64, 64, 3, 3]    # layer1.0.conv2.weight
        , %para128 : Ref[Tensor(F32)][256]    # layer1.1.bn3.gamma
        , %para129 : Ref[Tensor(F32)][256]    # layer1.1.bn3.beta
        , %para130 : Ref[Tensor(F32)][256]    # layer1.1.bn3.moving_mean
        , %para131 : Ref[Tensor(F32)][256]    # layer1.1.bn3.moving_variance
        , %para132 : Ref[Tensor(F32)][64, 64, 3, 3]    # layer1.1.conv2.weight
        , %para133 : Ref[Tensor(F32)][256]    # layer1.2.bn3.gamma
        , %para134 : Ref[Tensor(F32)][256]    # layer1.2.bn3.beta
        , %para135 : Ref[Tensor(F32)][256]    # layer1.2.bn3.moving_mean
        , %para136 : Ref[Tensor(F32)][256]    # layer1.2.bn3.moving_variance
        , %para137 : Ref[Tensor(F32)][64, 64, 3, 3]    # layer1.2.conv2.weight
        , %para138 : Ref[Tensor(F32)][256]    # layer3.0.bn2.gamma
        , %para139 : Ref[Tensor(F32)][256]    # layer3.0.bn2.beta
        , %para140 : Ref[Tensor(F32)][256]    # layer3.0.bn2.moving_mean
        , %para141 : Ref[Tensor(F32)][256]    # layer3.0.bn2.moving_variance
        , %para142 : Ref[Tensor(F32)][256, 512, 1, 1]    # layer3.0.conv1.weight
        , %para143 : Ref[Tensor(F32)][256]    # layer3.1.bn2.gamma
        , %para144 : Ref[Tensor(F32)][256]    # layer3.1.bn2.beta
        , %para145 : Ref[Tensor(F32)][256]    # layer3.1.bn2.moving_mean
        , %para146 : Ref[Tensor(F32)][256]    # layer3.1.bn2.moving_variance
        , %para147 : Ref[Tensor(F32)][256, 1024, 1, 1]    # layer3.1.conv1.weight
        , %para148 : Ref[Tensor(F32)][256]    # layer3.2.bn2.gamma
        , %para149 : Ref[Tensor(F32)][256]    # layer3.2.bn2.beta
        , %para150 : Ref[Tensor(F32)][256]    # layer3.2.bn2.moving_mean
        , %para151 : Ref[Tensor(F32)][256]    # layer3.2.bn2.moving_variance
        , %para152 : Ref[Tensor(F32)][256, 1024, 1, 1]    # layer3.2.conv1.weight
        , %para153 : Ref[Tensor(F32)][256]    # layer3.3.bn2.gamma
        , %para154 : Ref[Tensor(F32)][256]    # layer3.3.bn2.beta
        , %para155 : Ref[Tensor(F32)][256]    # layer3.3.bn2.moving_mean
        , %para156 : Ref[Tensor(F32)][256]    # layer3.3.bn2.moving_variance
        , %para157 : Ref[Tensor(F32)][256, 1024, 1, 1]    # layer3.3.conv1.weight
        , %para158 : Ref[Tensor(F32)][256]    # layer3.4.bn2.gamma
        , %para159 : Ref[Tensor(F32)][256]    # layer3.4.bn2.beta
        , %para160 : Ref[Tensor(F32)][256]    # layer3.4.bn2.moving_mean
        , %para161 : Ref[Tensor(F32)][256]    # layer3.4.bn2.moving_variance
        , %para162 : Ref[Tensor(F32)][256, 1024, 1, 1]    # layer3.4.conv1.weight
        , %para163 : Ref[Tensor(F32)][256]    # layer3.5.bn2.gamma
        , %para164 : Ref[Tensor(F32)][256]    # layer3.5.bn2.beta
        , %para165 : Ref[Tensor(F32)][256]    # layer3.5.bn2.moving_mean
        , %para166 : Ref[Tensor(F32)][256]    # layer3.5.bn2.moving_variance
        , %para167 : Ref[Tensor(F32)][256, 1024, 1, 1]    # layer3.5.conv1.weight
        , %para168 : Ref[Tensor(F32)][512]    # layer2.0.downsample.1.gamma
        , %para169 : Ref[Tensor(F32)][512]    # layer2.0.downsample.1.beta
        , %para170 : Ref[Tensor(F32)][512]    # layer2.0.downsample.1.moving_mean
        , %para171 : Ref[Tensor(F32)][512]    # layer2.0.downsample.1.moving_variance
        , %para172 : Ref[Tensor(F32)][128]    # layer2.0.bn2.gamma
        , %para173 : Ref[Tensor(F32)][128]    # layer2.0.bn2.beta
        , %para174 : Ref[Tensor(F32)][128]    # layer2.0.bn2.moving_mean
        , %para175 : Ref[Tensor(F32)][128]    # layer2.0.bn2.moving_variance
        , %para176 : Ref[Tensor(F32)][128, 256, 1, 1]    # layer2.0.conv1.weight
        , %para177 : Ref[Tensor(F32)][128]    # layer2.1.bn2.gamma
        , %para178 : Ref[Tensor(F32)][128]    # layer2.1.bn2.beta
        , %para179 : Ref[Tensor(F32)][128]    # layer2.1.bn2.moving_mean
        , %para180 : Ref[Tensor(F32)][128]    # layer2.1.bn2.moving_variance
        , %para181 : Ref[Tensor(F32)][128, 512, 1, 1]    # layer2.1.conv1.weight
        , %para182 : Ref[Tensor(F32)][128]    # layer2.2.bn2.gamma
        , %para183 : Ref[Tensor(F32)][128]    # layer2.2.bn2.beta
        , %para184 : Ref[Tensor(F32)][128]    # layer2.2.bn2.moving_mean
        , %para185 : Ref[Tensor(F32)][128]    # layer2.2.bn2.moving_variance
        , %para186 : Ref[Tensor(F32)][128, 512, 1, 1]    # layer2.2.conv1.weight
        , %para187 : Ref[Tensor(F32)][128]    # layer2.3.bn2.gamma
        , %para188 : Ref[Tensor(F32)][128]    # layer2.3.bn2.beta
        , %para189 : Ref[Tensor(F32)][128]    # layer2.3.bn2.moving_mean
        , %para190 : Ref[Tensor(F32)][128]    # layer2.3.bn2.moving_variance
        , %para191 : Ref[Tensor(F32)][128, 512, 1, 1]    # layer2.3.conv1.weight
        , %para192 : Ref[Tensor(F32)][256]    # layer1.0.downsample.1.gamma
        , %para193 : Ref[Tensor(F32)][256]    # layer1.0.downsample.1.beta
        , %para194 : Ref[Tensor(F32)][256]    # layer1.0.downsample.1.moving_mean
        , %para195 : Ref[Tensor(F32)][256]    # layer1.0.downsample.1.moving_variance
        , %para196 : Ref[Tensor(F32)][512]    # layer4.0.bn1.gamma
        , %para197 : Ref[Tensor(F32)][512]    # layer4.0.bn1.beta
        , %para198 : Ref[Tensor(F32)][512]    # layer4.0.bn1.moving_mean
        , %para199 : Ref[Tensor(F32)][512]    # layer4.0.bn1.moving_variance
        , %para200 : Ref[Tensor(F32)][512]    # layer4.1.bn1.gamma
        , %para201 : Ref[Tensor(F32)][512]    # layer4.1.bn1.beta
        , %para202 : Ref[Tensor(F32)][512]    # layer4.1.bn1.moving_mean
        , %para203 : Ref[Tensor(F32)][512]    # layer4.1.bn1.moving_variance
        , %para204 : Ref[Tensor(F32)][512]    # layer4.2.bn1.gamma
        , %para205 : Ref[Tensor(F32)][512]    # layer4.2.bn1.beta
        , %para206 : Ref[Tensor(F32)][512]    # layer4.2.bn1.moving_mean
        , %para207 : Ref[Tensor(F32)][512]    # layer4.2.bn1.moving_variance
        , %para208 : Ref[Tensor(F32)][64]    # layer1.0.bn2.gamma
        , %para209 : Ref[Tensor(F32)][64]    # layer1.0.bn2.beta
        , %para210 : Ref[Tensor(F32)][64]    # layer1.0.bn2.moving_mean
        , %para211 : Ref[Tensor(F32)][64]    # layer1.0.bn2.moving_variance
        , %para212 : Ref[Tensor(F32)][64, 64, 1, 1]    # layer1.0.conv1.weight
        , %para213 : Ref[Tensor(F32)][64]    # layer1.1.bn2.gamma
        , %para214 : Ref[Tensor(F32)][64]    # layer1.1.bn2.beta
        , %para215 : Ref[Tensor(F32)][64]    # layer1.1.bn2.moving_mean
        , %para216 : Ref[Tensor(F32)][64]    # layer1.1.bn2.moving_variance
        , %para217 : Ref[Tensor(F32)][64, 256, 1, 1]    # layer1.1.conv1.weight
        , %para218 : Ref[Tensor(F32)][64]    # layer1.2.bn2.gamma
        , %para219 : Ref[Tensor(F32)][64]    # layer1.2.bn2.beta
        , %para220 : Ref[Tensor(F32)][64]    # layer1.2.bn2.moving_mean
        , %para221 : Ref[Tensor(F32)][64]    # layer1.2.bn2.moving_variance
        , %para222 : Ref[Tensor(F32)][64, 256, 1, 1]    # layer1.2.conv1.weight
        , %para223 : Ref[Tensor(F32)][256]    # layer3.0.bn1.gamma
        , %para224 : Ref[Tensor(F32)][256]    # layer3.0.bn1.beta
        , %para225 : Ref[Tensor(F32)][256]    # layer3.0.bn1.moving_mean
        , %para226 : Ref[Tensor(F32)][256]    # layer3.0.bn1.moving_variance
        , %para227 : Ref[Tensor(F32)][256]    # layer3.1.bn1.gamma
        , %para228 : Ref[Tensor(F32)][256]    # layer3.1.bn1.beta
        , %para229 : Ref[Tensor(F32)][256]    # layer3.1.bn1.moving_mean
        , %para230 : Ref[Tensor(F32)][256]    # layer3.1.bn1.moving_variance
        , %para231 : Ref[Tensor(F32)][256]    # layer3.2.bn1.gamma
        , %para232 : Ref[Tensor(F32)][256]    # layer3.2.bn1.beta
        , %para233 : Ref[Tensor(F32)][256]    # layer3.2.bn1.moving_mean
        , %para234 : Ref[Tensor(F32)][256]    # layer3.2.bn1.moving_variance
        , %para235 : Ref[Tensor(F32)][256]    # layer3.3.bn1.gamma
        , %para236 : Ref[Tensor(F32)][256]    # layer3.3.bn1.beta
        , %para237 : Ref[Tensor(F32)][256]    # layer3.3.bn1.moving_mean
        , %para238 : Ref[Tensor(F32)][256]    # layer3.3.bn1.moving_variance
        , %para239 : Ref[Tensor(F32)][256]    # layer3.4.bn1.gamma
        , %para240 : Ref[Tensor(F32)][256]    # layer3.4.bn1.beta
        , %para241 : Ref[Tensor(F32)][256]    # layer3.4.bn1.moving_mean
        , %para242 : Ref[Tensor(F32)][256]    # layer3.4.bn1.moving_variance
        , %para243 : Ref[Tensor(F32)][256]    # layer3.5.bn1.gamma
        , %para244 : Ref[Tensor(F32)][256]    # layer3.5.bn1.beta
        , %para245 : Ref[Tensor(F32)][256]    # layer3.5.bn1.moving_mean
        , %para246 : Ref[Tensor(F32)][256]    # layer3.5.bn1.moving_variance
        , %para247 : Ref[Tensor(F32)][128]    # layer2.0.bn1.gamma
        , %para248 : Ref[Tensor(F32)][128]    # layer2.0.bn1.beta
        , %para249 : Ref[Tensor(F32)][128]    # layer2.0.bn1.moving_mean
        , %para250 : Ref[Tensor(F32)][128]    # layer2.0.bn1.moving_variance
        , %para251 : Ref[Tensor(F32)][128]    # layer2.1.bn1.gamma
        , %para252 : Ref[Tensor(F32)][128]    # layer2.1.bn1.beta
        , %para253 : Ref[Tensor(F32)][128]    # layer2.1.bn1.moving_mean
        , %para254 : Ref[Tensor(F32)][128]    # layer2.1.bn1.moving_variance
        , %para255 : Ref[Tensor(F32)][128]    # layer2.2.bn1.gamma
        , %para256 : Ref[Tensor(F32)][128]    # layer2.2.bn1.beta
        , %para257 : Ref[Tensor(F32)][128]    # layer2.2.bn1.moving_mean
        , %para258 : Ref[Tensor(F32)][128]    # layer2.2.bn1.moving_variance
        , %para259 : Ref[Tensor(F32)][128]    # layer2.3.bn1.gamma
        , %para260 : Ref[Tensor(F32)][128]    # layer2.3.bn1.beta
        , %para261 : Ref[Tensor(F32)][128]    # layer2.3.bn1.moving_mean
        , %para262 : Ref[Tensor(F32)][128]    # layer2.3.bn1.moving_variance
        , %para263 : Ref[Tensor(F32)][64]    # layer1.0.bn1.gamma
        , %para264 : Ref[Tensor(F32)][64]    # layer1.0.bn1.beta
        , %para265 : Ref[Tensor(F32)][64]    # layer1.0.bn1.moving_mean
        , %para266 : Ref[Tensor(F32)][64]    # layer1.0.bn1.moving_variance
        , %para267 : Ref[Tensor(F32)][64]    # layer1.1.bn1.gamma
        , %para268 : Ref[Tensor(F32)][64]    # layer1.1.bn1.beta
        , %para269 : Ref[Tensor(F32)][64]    # layer1.1.bn1.moving_mean
        , %para270 : Ref[Tensor(F32)][64]    # layer1.1.bn1.moving_variance
        , %para271 : Ref[Tensor(F32)][64]    # layer1.2.bn1.gamma
        , %para272 : Ref[Tensor(F32)][64]    # layer1.2.bn1.beta
        , %para273 : Ref[Tensor(F32)][64]    # layer1.2.bn1.moving_mean
        , %para274 : Ref[Tensor(F32)][64]    # layer1.2.bn1.moving_variance
    ) {

#------------------------> 0
    %1 = FuncGraph::fg_43(%para1)    #(Tensor(U8)[8, 3, 256, 128])    # fg_43=construct.43 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(228)/        return self._forward_impl(x)/#[CNode]48
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(228)/        return self._forward_impl(x)/#[CNode]49
}
# order:
#   1: construct_wrapper.42:[CNode]48{[0]: ValueNode<FuncGraph> construct.43, [1]: x}
#   2: construct_wrapper.42:[CNode]49{[0]: ValueNode<Primitive> Return, [1]: [CNode]48}


# [No.2] construct.43
# In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(227)/    def construct(self, x: Tensor) -> Tensor:/
funcgraph fg_43[fg_42](
        %para275 : Tensor(U8)[8, 3, 256, 128]    # x
    ) {

#------------------------> 1
    %1 = FuncGraph::fg_44(%para275)    #(Tensor(U8)[8, 3, 256, 128])    # fg_44=_forward_impl.44 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(228)/        return self._forward_impl(x)/#[CNode]50
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(228)/        return self._forward_impl(x)/#[CNode]51
}
# order:
#   1: construct.43:[CNode]50{[0]: ValueNode<FuncGraph> _forward_impl.44, [1]: x}
#   2: construct.43:[CNode]51{[0]: ValueNode<Primitive> Return, [1]: [CNode]50}


# [No.3] _forward_impl.44
# In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(207)/    def _forward_impl(self, x: Tensor) -> Tensor:/
funcgraph fg_44[fg_42](
        %para276 : Tensor(U8)[8, 3, 256, 128]    # x
    ) {
    %1 : Bool = DoSignaturePrimitive::S-Prim-logical_not{prim_type=1}(Bool(0))    #(Bool) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(221)/        if not self.training:/#[CNode]52
    %2 : Bool = FuncGraph::fg_53(%1)    #(Bool)    # fg_53=bool_.53 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(221)/        if not self.training:/#[CNode]52
    %3 : Func = Primitive::Switch{prim_type=1}(%2, FuncGraph::fg_45, FuncGraph::fg_54)    #(Bool, Func, Func)    # fg_45=✓_forward_impl.45, fg_54=✗_forward_impl.54 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(221)/        if not self.training:/#[CNode]55

#------------------------> 2
    %4 = %3() #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(221)/        if not self.training:/#[CNode]56
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(221)/        if not self.training:/#[CNode]57
}
# order:
#   1: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.46, [1]: x}
#   2: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.58, [1]: x}
#   3: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.59, [1]: x}
#   4: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.60, [1]: x}
#   5: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.61, [1]: x}
#   6: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.62, [1]: x}
#   7: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.63, [1]: x}
#   8: _forward_impl.44:x{[0]: ValueNode<FuncGraph> construct.64, [1]: x}
#   9: _forward_impl.44:[CNode]65{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 2, [2]: ValueNode<Int64Imm> 3}
#  10: _forward_impl.44:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-ReduceMean, [1]: x, [2]: [CNode]65}
#  11: _forward_impl.44:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Flatten, [1]: x}
#  12: _forward_impl.44:[CNode]52{[0]: ValueNode<DoSignaturePrimitive> S-Prim-logical_not, [1]: ValueNode<BoolImm> false}
#  13: _forward_impl.44:[CNode]52{[0]: ValueNode<FuncGraph> bool_.53, [1]: [CNode]52}
#  14: _forward_impl.44:[CNode]55{[0]: ValueNode<Primitive> Switch, [1]: [CNode]52, [2]: ValueNode<FuncGraph> ✓_forward_impl.45, [3]: ValueNode<FuncGraph> ✗_forward_impl.54}
#  15: _forward_impl.44:[CNode]56{[0]: [CNode]55}
#  16: _forward_impl.44:[CNode]57{[0]: ValueNode<Primitive> Return, [1]: [CNode]56}


# [No.4] ✓_forward_impl.45
# In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(221)/        if not self.training:/
funcgraph fg_45[fg_44](
) {

#------------------------> 3
    %1 = $(✓_forward_impl.45):FuncGraph::fg_46(%para276)    #(Tensor(U8)[8, 3, 256, 128])    # fg_46=construct.46 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(208)/        x = self.conv1(x)/#x
    %2 = $(✓_forward_impl.45):FuncGraph::fg_58(%1)    #(Undefined)    # fg_58=construct.58 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(209)/        x = self.bn1(x)/#x
    %3 = $(✓_forward_impl.45):FuncGraph::fg_59(%2)    #(Undefined)    # fg_59=construct.59 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(210)/        x = self.relu(x)/#x
    %4 = $(✓_forward_impl.45):FuncGraph::fg_60(%3)    #(Undefined)    # fg_60=construct.60 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(211)/        x = self.maxpool(x)/#x
    %5 = $(✓_forward_impl.45):FuncGraph::fg_61(%4)    #(Undefined)    # fg_61=construct.61 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(213)/        x = self.layer1(x)/#x
    %6 = $(✓_forward_impl.45):FuncGraph::fg_62(%5)    #(Undefined)    # fg_62=construct.62 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(214)/        x = self.layer2(x)/#x
    %7 = $(✓_forward_impl.45):FuncGraph::fg_63(%6)    #(Undefined)    # fg_63=construct.63 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(215)/        x = self.layer3(x)/#x
    %8 = $(✓_forward_impl.45):FuncGraph::fg_64(%7)    #(Undefined)    # fg_64=construct.64 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(216)/        x = self.layer4(x)/#x
    %9 = $(✓_forward_impl.45):DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(I64(2), I64(3))    #(Undefined, Undefined) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(218)/        x = self.mean(x, (2, 3))/#[CNode]65
    %10 = $(✓_forward_impl.45):DoSignaturePrimitive::S-Prim-ReduceMean{prim_type=1}[keep_dims=Bool(1), input_names=["input_x", "axis"], output_names=["y"]](%8, %9)    #(Undefined, Undefined) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(218)/        x = self.mean(x, (2, 3))/#x
    %11 = $(✓_forward_impl.45):DoSignaturePrimitive::S-Prim-Flatten{prim_type=1}(%10)    #(Undefined) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(219)/        x = self.flatten(x)/#x
    %12 = FuncGraph::fg_66(%11)    #(Undefined)    # fg_66=construct.66 #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(222)/            return self.fc(x)/#[CNode]67
    Primitive::Return{prim_type=1}(%12)    #(Undefined) #scope: Default
      # In file /home/tangzl/cqu/projects/ascend/tracktor/src/reid.py(222)/            return self.fc(x)/#[CNode]68
}
# order:
#   1: ✓_forward_impl.45:[CNode]67{[0]: ValueNode<FuncGraph> construct.66, [1]: x}
#   2: ✓_forward_impl.45:[CNode]68{[0]: ValueNode<Primitive> Return, [1]: [CNode]67}


# [No.5] construct.46
# In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(260)/    def construct(self, x):/
funcgraph fg_46[fg_42](
        %para277 : Tensor(U8)[8, 3, 256, 128]    # x
    ) {
    %1 : Bool = FuncGraph::fg_53(Bool(0))    #(Bool)    # fg_53=bool_.53 #scope: Default/conv1-Conv2d
      # In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(262)/        if self.has_bias:/#69
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_70, FuncGraph::fg_47)    #(Bool, Func, Func)    # fg_70=✓construct.70, fg_47=✗construct.47 #scope: Default/conv1-Conv2d
      # In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(262)/        if self.has_bias:/#[CNode]71

#------------------------> 4
    %3 = %2() #scope: Default/conv1-Conv2d
      # In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(262)/        if self.has_bias:/#[CNode]72
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default/conv1-Conv2d
      # In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(262)/        if self.has_bias:/#[CNode]73
}
# order:
#   1: construct.46:output{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Conv2D, [1]: x, [2]: conv1.weight}
#   2: construct.46:69{[0]: ValueNode<FuncGraph> bool_.53, [1]: ValueNode<BoolImm> false}
#   3: construct.46:[CNode]71{[0]: ValueNode<Primitive> Switch, [1]: 69, [2]: ValueNode<FuncGraph> ✓construct.70, [3]: ValueNode<FuncGraph> ✗construct.47}
#   4: construct.46:[CNode]72{[0]: [CNode]71}
#   5: construct.46:[CNode]73{[0]: ValueNode<Primitive> Return, [1]: [CNode]72}


# [No.6] ✗construct.47
# In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(262)/        if self.has_bias:/
funcgraph fg_47[fg_46](
) {

#------------------------> 5
    %1 = $(✗construct.47):DoSignaturePrimitive::S-Prim-Conv2D{prim_type=1}[out_channel=I64(64), output_names=["output"], mode=I64(1), pad_mode=I64(0), pad=(I64(3), I64(3), I64(3), I64(3)), groups=I64(1), format="NCHW", group=I64(1), kernel_size=(I64(7), I64(7)), stride=(I64(1), I64(1), I64(2), I64(2)), input_names=["x", "w"], dilation=(I64(1), I64(1), I64(1), I64(1))](%para277, %para8)    #(Tensor(U8)[8, 3, 256, 128], Ref[Tensor(F32)][64, 3, 7, 7]) #scope: Default/conv1-Conv2d
      # In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(261)/        output = self.conv2d(x, self.weight)/#output
    %2 = FuncGraph::fg_74(%1)    #(Undefined)    # fg_74=↓construct.74 #scope: Default/conv1-Conv2d
      # In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(262)/        if self.has_bias:/#[CNode]75
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/conv1-Conv2d
      # In file /home/tangzl/miniconda3/envs/mindspore/lib/python3.7/site-packages/mindspore/nn/layer/conv.py(262)/        if self.has_bias:/#[CNode]76
}
# order:
#   1: ✗construct.47:[CNode]75{[0]: ValueNode<FuncGraph> ↓construct.74, [1]: output}
#   2: ✗construct.47:[CNode]76{[0]: ValueNode<Primitive> Return, [1]: [CNode]75}


#===============================================================================
# num of function graphs in stack: 7
